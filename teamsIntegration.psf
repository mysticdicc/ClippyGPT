<File version="3.2">
  <FileID>04ac1f7c-73ac-440b-952a-d7aa32e87d00</FileID>
  <Preview>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
3BAAzBoB4C0EAAA3BACzRgB4CwEAwA0BwKwRAN5CAABwQwAwawSAtxAAANwQAMwaAeAtBAAANwQA
s0YAeAsBAMANAcCsEQDeQgAAcEMAMGsEgLcQAADcEADMGgHgLQQAADcEALNGAHgLAQDADQHArBEA
3kIAAHBDADBrBIC3EAAA3BAAzBoB4C0EAAA3BACzRgB4CwEAwA0BwKwRAN5CAABwQwAwawSAtxAA
ANwQAMwaAeAtBAAANwQAs0YAeAsBAMANAcCsEQDeQgAAcEMAMGsEgLcQAADcEADMGgHgLQQAADcE
ALNGAHgLAQDADQHArBEA3kIAAHBDADBrBIC3EAAA3BAAzBoB4C0EAAA3BACzRgB4CwEAwA0BwKwR
AN5CAABwQwAwawSAtxAAANwQAMwaAeAtBAAANwQAs0YAeAsBAMANAcCsEQDeQgAAcEMAMGsEgLcQ
AADcEADMGgHgLQQAADcEALNGAHgLAQDADQHArBEA3kIAAHBDADBrBIC3EAAA3BAAzBoB4C0EAAA3
BACzRgB4CwEAwA0BwKwRAN5CAABwQwAwawSAtxAAANwQAMwaAeAtBAAANwQAs0YAeAsBAMANAcCs
EQDeQgAAcEMAMGsEgLcQAADcEADMGgHgLQQAADcEALNGAHgLAQDADQHArBEA3kIAAHBDADBrBIC3
EAAA3BAAzBoB4C0EAAA3BACzRgB4CwEAwA0BwKwRAN5CAABwQwAwawSAtxAAANwQAMwaAeAtBAAA
NwQAs0YAeAsBAMANAcCsEQDeQgAAcEMAMGsEgLcQAADcEADMGgHgLQQAADcEALNGAHgLAQDADQHA
rBEA3kIAAHBDADBrBIC3EAAA3BAAzBoB4C0EAAA3BACzRgB4CwEAwA0BwKwRAN5CAABwQwAwawSA
txAAANwQAMwaAeAtBAAANwQAs0YAeAsBAMANAcCsEQDeQgAAcEMAMGsEgLcQAADcEADMGgHgLQQA
ADcEALNGAHgLAQDADQHArBEA3kIAAHBDADBrBIC3EAAA3BAAzBoB4C0EAAA3BACzRgB4CwEAwA0B
wKwRAN5CAABwQwAwawSAtxAAANwQAMwaAeAtBAAANwQAs0YAeAsBAMANAcCsEQDeQgAAcEMAMGsE
gLcQAADcEADMGgHgLQQAADcEALNGAHgLAQDADQHArBEA3kIAAHBDADBrBIC3EAAA3BAAzBoB4C0E
AAA3BACzRgB4CwEAwA0BwKwRAN5CAABwQwAwawSAtxAAANwQAMwaAeAtBAAANwQAs0YAeAsBAMAN
AcCsEQDeQgAAcEMAMGsEgLcQAADcEADMGgHgLQQAADcEALNGAHgLAQDADQHArBEA3kIAAHBDADBr
BIC3EAAA3BAAzBoB4C0EAAA3BACzRgB4CwEAwA0BwKwRAN5CAABwQwAwawSAtxAAANwQAMwaAeAt
BAAANwQAs0YAeAsBAMANAcCsEQDeQgAAcEMAMGsEgLcQAADcEADMGgHgLQQAADcEALNGAHgLAQDA
DQHArBEA3kIAAHBDADBrBIC3EAAA3BAAzBoB4C0EAAA3BACzRgB4CwEAwA0BwKwRAN5CAABwQwAw
awSAtxAAANwQAMwaAeAtBAAANwQAs0YAeAsBAMANAcCsEQDeQgAAcEMAMGsEgLcQAADcEADMGgHg
LQQAADcEALNGAHgLAQDADQHArBEA3kIAAHBDADBrBIC3EAAA3BAAzBoB4C0EAAA3BACzRgB4CwEA
wA0BwKwRAN5CAABwQwAwawSAtxAAANwQAMwaAeAtBAAANwQAs0YAeAsBAMANAcCsEQDeQgAAcEMA
MGsEgLcQAADcEADMGgHgLQQAADcEALNGAHgLAQDADQHArBEA3kIAAHBDADBrBIC3EAAA3BAAzBoB
4C0EAAA3BACzRgB4CwEAwA0BwKwRAN5CAABwQwAwawSAtxAAANwQAMwaAeAtBAAANwQAs0YAeAsB
AMANAcCsEQDeQgAAcEMAMGsEgLcQAADcEADMGgHgLQQAADcEALNGAHgLAQDADQHArBEA3kIAAHBD
ADBrBIC3EAAA3BAAzBoB4C0EAAA3BACzRgB4CwEAwA0BwKwRAN5CAABwQwAwawSAtxAAANwQAMwa
AeAtBAAANwQAs0YAeAsBAMANAcCsEQDeQgAAcEMAMGsEgLcQAADcEADMGgHgLQQAADcEALNGAHgL
AQDADQHArBEA3kIAAHBDADBrBIC3EAAA3BAAzBoB4C0EAAA3BACzRgB4CwEAwA0BwKwRAN5CAABw
QwAwawSAtxAAANwQAMwaAeAtBAAANwQAs0YAeAsBAMANAcCsEQDeQgAAcEMAMGsEgLcQAADcEADM
GgHgLQQAADcEALNGAHgLAQDADQHArBEA3kIAAHBDADBrBIC3EAAA3BAAzBoB4C0EAAA3BACzRgB4
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
ydr/A1cIYalu/1RjAAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$formApiAuth_Load = {
	#ms graph azure app information
	$script:tenantID = ''
	$script:clientID = ''
	$script:redirectURL = ''
	$script:scope = ''
	
	$script:rootURL = 'https://graph.microsoft.com/v1.0'
	
	#get teams credentials to authentication with azure
	if ($null -ne $settings.teamsEmail)
	{
		$script:teamsCreds = Get-Credential -Message "Enter Teams login details" -UserName $settings.teamsEmail
	}
	else
	{
		$script:teamsCreds = Get-Credential -Message "Enter Teams login details"
	}
	
	Update-SettingsFile -teamsEmail $teamsCreds.UserName
	Connect-MicrosoftGraph -username $teamsCreds.UserName -password ($teamsCreds.GetNetworkCredential().password)
	
	$txtAccessToken.Text = $auth.access_token
	$txtScope.Text = $auth.scope
	
	#grid view details
	$txtChatNumber.Text = 10
	$txtMessageNumber.Text = 10
	
	#list view details
	$script:obj = Create-MessagesObject -chatCount $txtChatNumber.text -msgCount $txtMessageNumber.text
	$lstMembers.DataSource = $obj.members.Trim()
	
	$txtSystem.Text = $settings.teamsSystemPrompt
	$script:userID = (Get-UserInfo).id
}

#region functions
function Generate-ChallengeURL
{
	param (
		$tenantID,
		$clientID,
		$response_type = 'code',
		$response_mode = 'query',
		$redirectURL = 'http%3A%2F%2Flocalhost%2FclippyGPTauth',
		$scope,
		$state = '12345'
	)
	
	#generate challenge url
	$challengeURL = "https://login.microsoftonline.com/$tenantID/oauth2/v2.0/authorize?client_id=$clientID`
					&response_type=$response_type&redirect_uri=$redirectURL&response_mode=$response_mode`
					&scope=$scope&state=$state"
	
	$body = @{
		client_id = "$clientID"
		response_type = "$response_type"
		redirect_uri = "$redirectURL"
		response_mode = "$response_mode"
		scope	  = "$scope"
		state	  = "$state"
	}
	
	return $challengeURL
}

function Connect-MicrosoftGraph
{
	param (
		$client_id = $script:clientID,
		$tenant_id = $script:tenantID,
		$username,
		$password,
		$scope = $script:scope
	)
	
	$requestBody = @{
		resource  = 'https://graph.microsoft.com'
		client_id = "$clientID"
		grant_type = "password"
		username  = "$username"
		scope	  = "chat.readwrite"
		password  = "$password"
	}
	
	$global:auth = Invoke-RestMethod -Method post -Uri "https://login.microsoftonline.com/$tenantId/oauth2/token" -Body $requestBody -ContentType "application/x-www-form-urlencoded"
	
	$global:graphAuthHeader = @{
		authorization  = "Bearer $($auth.access_token)"
		"Content-type" = "application/json"
	}
}

function Get-UserInfo
{
	param (
		$authHeader	 = $graphAuthHeader
	)
	
	$userInfo = Invoke-RestMethod -Method Get -Uri "$rootURL/me" -Headers $authHeader -ContentType "application/json"
	return $userInfo.value
}

function Get-TeamsChats
{
	param (
		$authHeader = $graphAuthHeader,
		$count = 20
	)
	
	$chatURL = "$rootURL" + '/me/chats?$top=' + $count
	$chats = Invoke-RestMethod -Method Get -Uri $chatURL -Headers $authHeader -ContentType "application/json"
	return $chats
}

function Get-TeamsChatMembers
{
	param (
		$authHeader = $graphAuthHeader,
		$chatID
	)
	
	$membersURL = "$rootURL/chats/$chatID/members"
	$members = (Invoke-RestMethod -Method Get -Uri $membersURL -Headers $authHeader -ContentType "application/json").value.email
	#$members = $members 
	return $members
}

function Get-TeamsChatMessages
{
	param (
		$authHeader = $graphAuthHeader,
		$chatID,
		$count = 5
	)
	
	$chatUrl = "$rootURL/chats/$chatID/messages?count=$count"
	$messages = (Invoke-RestMethod -Method Get -Uri $chatURL -Headers $authHeader -ContentType "application/json").value	
	return $messages
}

function Create-MessagesObject
{
	param (
		$chatCount,
		$msgCount
	)
	#create custom object classes
	class message {
		[System.String]$from
		[System.String]$body
		[System.String]$created
		[System.String]$id
		[System.String]$chatid
		[System.String]$userID
	}
	
	class chat {
		[System.String]$members
		[System.Array]$messages
		[system.string]$id
	}
	
	#loop through last 20 chats
	$chats = Get-TeamsChats -count $chatCount
	$formattedChats = @()
	
	foreach ($chat in $chats.value)
	{
		$newChat = [chat]::new()
		
		#get members of the chat
		if ($chat.chatType -eq 'oneOnOne')
		{
			$membersURL = "$rootURL/chats/$($chat.id)/members"
			$members = (Invoke-RestMethod -Method Get -Uri $membersURL -Headers $graphAuthHeader -ContentType "application/json").value.email
			
			$members = $members -replace ("$($teamsCreds.username)", '')
			$members = $members -replace ('@gxo.com','')
			$newchat.members = $members
		}
		else
		{
			if ($null -ne $chat.topic)
			{
				$newChat.members = $chat.topic
			}
			else
			{
				$membersURL = "$rootURL/chats/$($chat.id)/members"
				$members = (Invoke-RestMethod -Method Get -Uri $membersURL -Headers $graphAuthHeader -ContentType "application/json").value.email
				
				$members = $members -replace ("$($teamsCreds.username)", '')
				$members = $members -replace ('@gxo.com', '')
				$newchat.members = "Group: $members"
			}
		}
		
		#get message objects from the chat
		$chatURL = "$rootURL" + '/chats/' + $chat.id + '/messages?$top=' + $msgCount
		$messages = (Invoke-RestMethod -Method Get -Uri $chatURL -Headers $graphAuthHeader -ContentType "application/json").value
		
		#loop through message objects and format into custom chat objects
		$formattedMessages = @()
		
		foreach ($message in $messages)
		{
			$newMessage = [message]::new()
			$newMessage.from = $message.from.user.displayName
			$newMessage.body = $message.body.content
			$newMessage.chatid = $message.chatId
			$newMessage.id = $message.id
			$newMessage.created = $message.createdDateTime
			$newMessage.userID = $message.from.user.id
			
			$formattedMessages += $newMessage
		}
		
		#create a new chat object and added messages/members ot it
		$newChat.messages = $formattedMessages
		$newChat.id = $chat.id
		
		$formattedChats += $newChat
	}
	
	return $formattedChats
}

function Format-Messages
{
	param (
		$messages
	)
	
	if ($null -eq $grdMessages.columns[0])
	{
		$grdMessages.Columns.Add('Messages', 'Messages')
	}
	
	foreach ($message in $messages.messages)
	{
		$body = Format-Message -message $message.body
		
		
		$messageBody = "From: $($message.from)
Time: $($message.created)
		
Message: 
$body"
		
		$grdMessages.Rows.Add($messageBody)
	}
	
	$grdMessages.Columns[0].AutoSizeMode = [System.Windows.Forms.DataGridViewAutoSizeColumnsMode]'Fill'
	$grdMessages.AutoResizeRows()
}

function Format-Message
{
	param (
		$message
	)
	
	$body = $message -replace ('<p>', '') -replace ('</p>', '') -replace ('&nbsp;', '') -replace ('<span title.*', '') -replace ('<div>', '') -replace ('</div>', '')
	
	$body = $body.trim()
	return $body
}

function Send-TeamsMessage
{
	param (
		$authHeader = $graphAuthHeader,
		$chatID,
		$message
	)
	
	$replyURL = "$rootURL/chats/$chatID/messages"
	$message = $message -replace ('\n','<br>')
	
	$body = @{
		body = @{
			contentType = "html"
			content = "$message"
		}
	}
	
	$body = $body | ConvertTo-Json
	
	Invoke-RestMethod -Method Post -Uri $replyURL -Headers $graphAuthHeader -Body $body -ContentType "application/json"
}

function New-GptChatArray
{
	
	param (
		$messages
	)
	
	class gptChatBlock {
		$assMsg
		$userMsg
	}
	
	$list = New-Object System.Collections.ArrayList
	
	foreach ($msg in $messages)
	{
		$gptBlock = [gptChatBlock]::new()
		$body = Format-Message -message $msg.body
		
		if ($msg.userID -eq $script:userID)
		{
			$data = Get-ChatGPTString -assistant -content $body
			
		}
		else
		{
			$data = get-chatgptstring -user -content $body
		}
		
		$list += $data
	}
	
	return $list
}
#endregion

#region formControls
$lstMembers_SelectedIndexChanged = {
	$grdMessages.DataSource = $null
	$grdMessages.Rows.Clear()
	Format-Messages -messages $obj[$lstMembers.SelectedIndex]
	$txtChatID.Text = $obj[$lstMembers.SelectedIndex].id
	
	if ($null -ne $txtChatBox.Text)
	{
		$txtChatBox.Text = ""
	}
}

$btnRefreshChat_Click = {
	$script:obj = Create-MessagesObject -chatCount $txtChatNumber.text -msgCount $txtMessageNumber.text
	$lstMembers.DataSource = $obj.members.Trim()
}

$btnSend_Click = {
	if (($null -ne $obj[$lstMembers.SelectedIndex].id) -and ($null -ne $txtChatBox.Text))
	{
		Send-TeamsMessage -chatID $obj[$lstMembers.SelectedIndex].id -message $txtChatBox.Text
		$txtChatBox.Text = ""
	}
}

$btnAsk_Click = {
	if ($chkConvo.Checked -eq $true)
	{
		if ($null -ne $txtGPT.text)
		{
			$convoList = New-GptChatArray -messages $obj[$lstMembers.SelectedIndex].messages
			
			if ($null -ne $txtSystem.text)
			{
				$txtChatBox.Text = Get-ChatGPTAnswer -question $txtGPT.Text -conversation -convoList $convoList -system -systemString $txtSystem.Text
			}
			else
			{
				$txtChatBox.Text = Get-ChatGPTAnswer -question $txtGPT.Text -conversation -convoList $convoList
			}
			
			$txtGPT.Text = ""
		}
		
		
	}
	else
	{
		if ($null -ne $txtGPT.text)
		{
			
			if ($null -ne $txtSystem.Text)
			{
				$txtChatBox.Text = Get-ChatGPTAnswer -question $txtGPT.Text -system -systemString $txtSystem.Text
			}
			else
			{
				$txtChatBox.Text = Get-ChatGPTAnswer -question $txtGPT.Text
			}
			
			$txtGPT.Text = ""
		}
	}
	
}

$btnCopy_Click = {
	$message = Format-Message -message $obj[$lstMembers.SelectedIndex].messages[$grdMessages.SelectedRows[0].index].body
	$txtGPT.Text = "Please write a short reply to the following message:`n$message"
}


$btnRefreshMsg_Click = {
	$script:obj = Create-MessagesObject -chatCount $txtChatNumber.text -msgCount $txtMessageNumber.text
	$lstMembers.DataSource = $obj.members.Trim()
}

#endregion

#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

#region icon events
$btnSend_MouseHover={
	$btnSend.ImageIndex = 1
	
}

$btnSend_MouseLeave={
	$btnSend.ImageIndex = 0
	
}

$btnRefreshChat_MouseHover={
	$btnRefreshChat.ImageIndex = 1
	
}

$btnRefreshChat_MouseLeave={
	$btnRefreshChat.ImageIndex = 0
	
}

$btnCopy_MouseHover={
	$btnCopy.ImageIndex = 1
}

$btnCopy_MouseLeave={
	$btnCopy.ImageIndex = 0
}

$btnAsk_MouseHover={
	$btnAsk.ImageIndex = 1
}

$btnAsk_MouseLeave={
	$btnAsk.ImageIndex = 0
}
#endregion

$txtSystem_TextChanged={
	Update-SettingsFile -teamsSystemPrompt $txtSystem.text
}
]]></Code>
  <TV>0</TV>
  <Mode>1</Mode>
  <Assemblies />
</File>