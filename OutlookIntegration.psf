<File version="3.2">
  <FileID>21954a97-b118-46c2-8561-83e8788f6886</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAADe6SURBVHhe7d1pbFtpgu73yc3NpyCfLpAA8yEI
gns/3rlI0MkkQZAvkwC5GMwF0gi6ZyaTzMydruqema7u2ruqvG9led9tWZItyVpsed+tzdqsfd/3
hRJFUvtia/MiP3nfI9GmVbJLUkll8tT/BzwmeXR4KJE034fnHB7+EQAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1m//r5//PDUuMSU1Oi4x
NTqWEEIIIZGYs3EXzGl86p/8yZ+kLo7xb/fnf/4fbhfVdarRO6k6z5jqegghhBASiak343iLb0pX
7mRpcZh/u/gLl1Kbzcx5NV3Kr+nWo7pulTT0vEp+bTchhBBC3lecsblHBbXvHpML7DyLqe0c+P4C
EBefnNrS/1iP6j0qb+p1buRWUbuu57fqRl6LuexRUYNJY99CGnqdFJr5l4v9WbEzX9/r0ybv4nUW
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
Hh5+I3ZacPrQ0NAb04Pnl5u2knlXs1w7T+gBwYIoAAAA/ARRAAAA+AlaUwHILq5XUdGjxUUAAIBI
s+oCMDQrVbf1q6vHo8dTM85XzhJCCCEksjI2OWUKwOzKCkD8hYupQ3NSp/mne+TZQnMghBBCSMSl
w2bomboGpr6/AJw8E3d7ZOal2n2TTmMghBBCSOTGDv7d/hWsAQAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuN0f/dH/D5dwsJpPhVDpAAAA
AElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$outlook_Load = {
	$script:lastEmails = Get-RecentEmails 
	Update-DataGridView -DataGridView $grdLastEmails -Item $lastEmails
	Update-SignatureList
}

#region functions

#get list of x number of most recent emails
function Get-RecentEmails
{
	param (
		$number = 10
	)
	
	$outlook = New-Object -ComObject Outlook.Application
	$namespace = $outlook.GetNamespace("MAPI")
	$inbox = $namespace.GetDefaultFolder([Microsoft.Office.Interop.Outlook.OlDefaultFolders]::olFolderInbox)
	
	$date = Get-Date (Get-Date).AddDays(-1) -Format 'd/MM/yyyy hh.mm tt'
	$filter = "[ReceivedTime] >= '$date'"
	$items = $inbox.Items.Restrict($filter)
	$items.Sort('[ReceivedTime]', $false)
	
	$script:emails = $items | Sort-Object ReceivedTime -Descending
	return $items | Select-Object ConversationTopic, ReceivedTime, SenderName, senderEmailAddress, body -last $number | Sort-Object ReceivedTime -Descending
}

#update visually displayed email
function Update-Email
{
	param (
		$row = $grdLastEmails.SelectedRows[0]
	)
	
	$txtSubject.Text = $row.Cells[0].Value
	$txtSenderName.Text = $row.Cells[2].value
	$txtReceivedTime.Text = $row.Cells[1].value
	$txtEmailBody.Text = Format-EmailBody
}

#turn string of text into html email body
function Format-EmailBody
{
	param (
		$body = ($script:lastEmails | Where-Object { ($_.conversationTopic -eq $row.Cells[0].value) -and ($_.receivedTime -eq $row.Cells[1].value) -and ($_.senderName -eq $row.Cells[2].value) } | Select-Object -Property body).body
	)
	
	$body = $body -replace '\[.*\]', ''
	$body = $body -replace '\n\n\n', '\n'
	$body = $body -replace '\n\n', '\n'
	$body = $body -split 'From:.*'
	
	return $body[0]
}

#get one specific email item from the retrieved emails
function Get-EmailItem
{
	param (
		$row = $grdLastEmails.SelectedRows[0]
	)
	
	return $script:emails | Where-Object { ($_.conversationTopic -eq $row.Cells[0].value) -and ($_.receivedTime -eq $row.Cells[1].value) -and ($_.senderName -eq $row.Cells[2].value) }
}

#update list of signatures available to pick from
function Update-SignatureList
{
	$sigFolder = "$env:APPDATA\Microsoft\Signatures"
	$sigList = (Get-ChildItem -Path $sigFolder -filter "*.htm").name
	$lstSignatures.Items.Clear()
	
	if ($null -ne $sigList)
	{
		$lstSignatures.Items.Add($sigList)
		$lstSignatures.SetSelected(0, $true)
		$rtfName = $lstSignatures.selectedItem -replace '.htm', '.rtf'
		$txtSignature.LoadFile("$env:APPDATA\Microsoft\Signatures\$($rtfName)")
	}
}

#send reply using the email item retrieved
function Send-Reply
{
	param (
		$emailItem,
		$signatureName,
		[switch]$all
	)
	
	$Signature = Get-Content -Path "$env:APPDATA\Microsoft\Signatures\$($signatureName)"
	
	$body = $txtAnswer.Text -replace '\n', '<br>' #replace any line breaks with html breaks
	$body = '<p>' + $body + '</p>' #add paragraph tags
	$body = '<body>' + $body + '</body>' #add body tags
	$email = $body + '<br>Kind Regards,<br><br>' + $Signature #add signature
	
	if ($chkClippyBanner.Checked -eq $true)
	{
		$email = $email + '<br><br>This email was generated by ClippyGPT, please do not confuse it with genuine care for your issue or concern about your general wellbeing. Please forward any complaints to donotreply@gxo.com.'
	}
	
	if ($all)
	{
		$reply = $emailItem.replyAll()
	}
	else
	{
		$reply = $emailItem.reply()
	}
	
	$reply.htmlBody = $email
	$reply.send()
}

#delete selected email from email grid
function Delete-Email
{
	param (
			$emailItem
	)
	
	$emailItem.delete()
}

#open selected email from email gri natively in outlook
function Show-Email
{
	param (
		$emailItem
	)
	
	$emailItem.display()
}
#endregion

#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}


#endregion

#region formControls
#update dispalyed email info as user switches between emails
$grdLastEmails_SelectionChanged = {
	if (($null -ne $script:lastEmails) -and ($null -ne $grdLastEmails.SelectedRows[0]))
	{
		Update-Email
	}
}

#auto fill template for question field
$btnTmpReply_Click = {
	$templateTxt = "Write me a formal reply to the following email, please do not include a subject: `n`n" + $txtEmailBody.Text
	$txtQuestion.Text = $templateTxt
}

#auto fill template for question field
$buttonReplyIncluding_Click = {
	$templateTxt = "Write me a formal reply to the following email, please do not include a subject:`n`n" + $txtEmailBody.Text + "`n`nInclude the following topics as part of the reply:`n`n"
	$txtQuestion.Text = $templateTxt
}

#get chatgpt answer to question field
$btnAsk_Click = {
	$txtAnswer.Text = Get-ChatGPTAnswer -question $txtQuestion.Text
	$txtSubjectTo.Text = $txtSubject.Text
	$txtQuestion.Text = ""
}

#pull last number of x emails into emails grid
$btnGetEmails_Click = {
	if ($null -ne $txtNumber.text)
	{
		$script:lastEmails = Get-RecentEmails -number $txtNumber.Text
		Update-DataGridView -DataGridView $grdLastEmails -Item $lastEmails
	}
}

#reply to email with chatgpt answer field
$btnReply_Click = {
	$row = $grdLastEmails.SelectedRows[0]
	Send-Reply -emailItem ($emails | Where-Object { ($_.conversationTopic -eq $row.Cells[0].value) -and ($_.receivedTime -eq $row.Cells[1].value) -and ($_.senderName -eq $row.Cells[2].value) }) -signatureName $lstSignatures.selectedItem
}

#reply all to email with chatgpt answer field
$btnReplyAll_Click = {
	$row = $grdLastEmails.SelectedRows[0]
	Send-Reply -emailItem ($emails | Where-Object { ($_.conversationTopic -eq $row.Cells[0].value) -and ($_.receivedTime -eq $row.Cells[1].value) -and ($_.senderName -eq $row.Cells[2].value) }) -signatureName $lstSignatures.selectedItem -all
}

#load selected signature field into rich text box
$lstSignatures_SelectedIndexChanged = {
	if ($null -ne $lstSignatures.selectedItem)
	{
		$rtfName = $lstSignatures.selectedItem -replace '.htm', '.rtf'
		$txtSignature.LoadFile("$env:APPDATA\Microsoft\Signatures\$($rtfName)")
	}
}

#delete email button
$btnDelete_Click = {
	$emailItem = Get-EmailItem -row $grdLastEmails.SelectedRows[0]
	Delete-Email -emailItem $emailItem
	$script:lastEmails = Get-RecentEmails
	Update-DataGridView -DataGridView $grdLastEmails -Item $lastEmails
}

#show email button
$btnShow_Click = {
	$emailItem = Get-EmailItem -row $grdLastEmails.SelectedRows[0]
	Show-Email -emailItem $emailItem
}

$btnClearAnswer_Click = {
	$txtAnswer.Text = ""
	$txtSubjectTo.Text = ""
}

$btnClearQuestion_Click = {
	$txtQuestion.Text = ""
}

#endregion


]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="False">4</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>0</Mode>
  <Assemblies />
</File>